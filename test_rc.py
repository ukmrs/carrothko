from rc import RC4
from collections import namedtuple
import random

RC4example = namedtuple('RC4example',
                        ['key', 'keystream', 'input', 'ciphertext'])


class TestRC4againstexamples():
    examples = (RC4example('Key', 'eb9f7781b734ca72a719', 'Plaintext',
                           'bbf316e8d940af0ad3'),
                RC4example('Wiki', '6044db6d41b7', 'pedia', '1021bf0420'),
                RC4example('Secret', '04d46b053ca87b59', 'Attack at dawn',
                           '45a01f645fc35b383552544b9bf5'))

    @staticmethod
    def hexify(i: int) -> str:
        return hex(i).lstrip('0x').zfill(2)

    def get_keystream(self, key, length) -> str:
        """gets the keystream generated by RC4 pseudo-random algorithm"""
        return "".join(self.hexify(i) for i in RC4(key).prgen(length))

    def test_against_examples(self):
        for key, keystream, inp, cipher in self.examples:
            encoded = RC4(key).encode(inp)
            assert keystream == self.get_keystream(key, len(keystream) // 2)
            assert cipher == "".join(self.hexify(i) for i in encoded)
            assert inp == RC4(key).decode(encoded)


# --- test encode decode ---

def test_ed_whitespace():
    original = 'tes#^TEŋ ęß©t\n\tπś535ææœ ’æŋ’ðð’©ęþ'
    key = "some\tthing\n eles Qqę2πśð„’ę©"
    encoded = RC4(key).encode(original)
    assert original == RC4(key).decode(encoded)


def test_ed_highunicode():
    original = "".join(chr(i) for i in range(161, 55290))
    key = "something fancy"
    encoded = RC4(key).encode(original)
    assert original == RC4(key).decode(encoded)


